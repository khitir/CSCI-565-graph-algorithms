GHS Distributed Minimum Spanning Tree Algorithm

This project is an implementation of the Gallager-Humblet-Spira (GHS) Distributed Minimum Spanning Tree Algorithm using Python. The GHS algorithm is a well-known distributed algorithm to find the minimum spanning tree (MST) of a connected, weighted, and undirected graph. This implementation simulates nodes communicating over edges to achieve distributed MST formation. The project simulates a network of nodes connected by weighted edges, where each node runs its own instance of the GHS algorithm to collaboratively construct the MST. Nodes communicate by sending and receiving messages, which are implemented using message queues. Each node is treated as an independent entity that communicates with its neighboring nodes via messages, following the core steps of the GHS algorithm. Initially, each node starts in a "sleeping" state and wakes up upon receiving a message or spontaneously. The nodes then coordinate to merge smaller fragments of the graph into larger fragments, progressively growing towards the formation of the MST. Messages such as CONNECT, INITIATE, TEST, ACCEPT, REJECT, REPORT, and CHANGE_ROOT are used throughout the process to ensure that nodes synchronize and correctly build the MST. The GHS algorithm is effective for distributed environments, allowing each node to operate concurrently while minimizing the need for centralized coordination.

To use this implementation, you will need Python 3.6 or higher. No additional libraries are required. The input graph should be provided in a text file, where each line represents an edge with two node IDs and a weight, for example:
1 2 5
1 3 10
2 3 2

Each line indicates an edge between two nodes (n1 and n2) with a specific weight (weight). You can run the script by executing python ghs_mst.py in the command line, making sure to modify the file path for the input graph within the code or provide your own file path. The output will be printed to the console and saved to an output file named mst_GHS_output.txt, which will include the edges that make up the MST along with the total weight of the MST.The core of the algorithm involves multiple phases, beginning with the wakeup phase where each node starts in a sleeping state and transitions to an active state upon receiving a message. Nodes then enter the fragment merging phase, where they merge smaller fragments into larger ones until the entire network is spanned. During this process, nodes communicate by sending various messages to coordinate their actions. The nodes exchange messages to determine which edges to include in the MST, ensuring that they avoid cycles and find the optimal set of edges to minimize the total weight. The simulation is designed to process messages in queues for each node, mimicking a real distributed system. 

The Node Class represents a node in the graph and manages its state as well as communication with other nodes. The Edge Class represents an edge that connects two nodes, including its weight and state (whether it is part of the MST, a rejected edge, or yet to be processed). The Message Class represents a message sent between nodes, which is used for all communications within the algorithm. The simulate(nodes) function drives the distributed algorithm by processing messages between nodes until no more messages remain. The main() function serves as the entry point of the program, reading the input graph, initializing nodes and edges, and then starting the distributed simulation.

The output of the program includes the edges that are part of the MST and the total weight of the MST, which are both printed to the console and saved in an output file (mst_GHS_output.txt). This helps verify that the algorithm has correctly constructed the MST and provides a record of the result. The output format is easy to read, with each edge displayed along with its weight and the total weight of the MST calculated at the end.


to run, make sure to modify input file address fb-origin-with-unique-weights.txt inside ghs-mst.py .  output file will be created on its own. 